// signal_notifier.js - CH·ªà G·ª¨I T√çN HI·ªÜU, KH√îNG AUTO TRADE
import dotenv from 'dotenv';

dotenv.config();

class SignalNotifier {
    constructor(bot = null) {
        this.bot = bot;
        this.sentSignals = new Set(); // Track ƒë·ªÉ tr√°nh tr√πng
    }

    /**
     * X·ª≠ l√Ω signal - CH·ªà G·ª¨I QUA TELEGRAM, KH√îNG AUTO TRADE
     */
    async processSignal(signal) {
        const symbol = signal.symbol;
        
        console.log(`üì° T√≠n hi·ªáu nh·∫≠n ƒë∆∞·ª£c: ${symbol} - ${signal.direction} (Score: ${signal.score})`);
        
        // CHECK TR√ôNG
        const signalKey = `${symbol}_${signal.direction}`;
        if (this.sentSignals.has(signalKey)) {
            console.log(`‚è≠Ô∏è Signal ${signalKey} ƒë√£ g·ª≠i r·ªìi, skip.`);
            return false;
        }
        
        // AI PH√ÇN T√çCH (n·∫øu c√≥)
        let aiDecision = 'UNKNOWN';
        let aiConfidence = 0;
        let aiReason = 'No AI analysis';
        
        if (process.env.AI_ENABLED === 'true') {
            console.log(`ü§ñ AI ƒëang ph√¢n t√≠ch ${symbol}...`);
            try {
                const { default: DailyTradingAdvisor } = await import('./ai_daily_advisor.js');
                const advisor = new DailyTradingAdvisor();
                const aiResult = await advisor.getDailyRecommendation(symbol);
                
                if (aiResult.success) {
                    aiDecision = aiResult.data.decision;
                    aiConfidence = aiResult.data.confidence;
                    aiReason = aiResult.data.reason;
                    
                    console.log(`ü§ñ AI Decision: ${aiDecision} (${(aiConfidence * 100).toFixed(0)}% confidence)`);
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è AI failed:', error.message);
            }
        }
        
        // G·ª¨I T√çN HI·ªÜU QUA TELEGRAM
        const message = `
üéØ *T√çN HI·ªÜU GIAO D·ªäCH - ${symbol}*

üìä *Indicators:*
‚Ä¢ ${signal.direction} Signal
‚Ä¢ Score: ${signal.score} ƒëi·ªÉm
‚Ä¢ Entry: ${signal.price}
‚Ä¢ Stop Loss: ${signal.sl}
‚Ä¢ Take Profit: ${signal.tp || 'N/A'}
${signal.strategy ? `‚Ä¢ Strategy: ${signal.strategy}` : ''}

${aiDecision !== 'UNKNOWN' ? `ü§ñ *AI Ph√¢n T√≠ch:*
‚Ä¢ Quy·∫øt ƒë·ªãnh: ${aiDecision}
‚Ä¢ Confidence: ${(aiConfidence * 100).toFixed(0)}%
‚Ä¢ ${aiReason}` : ''}

‚ö†Ô∏è *B·∫°n t·ª± quy·∫øt ƒë·ªãnh v√†o l·ªánh.*
`;
        
        if (this.bot && process.env.TELEGRAM_CHAT_ID) {
            try {
                await this.bot.sendMessage(process.env.TELEGRAM_CHAT_ID, message, { parse_mode: 'Markdown' });
                this.sentSignals.add(signalKey);
                console.log(`‚úÖ ƒê√£ g·ª≠i signal ${symbol} qua Telegram`);
                return true;
            } catch (error) {
                console.error(`‚ùå L·ªói g·ª≠i Telegram: ${error.message}`);
            }
        }
        
        return false;
    }
}

export default SignalNotifier;

