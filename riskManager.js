// riskManager.js - Qu·∫£n l√Ω r·ªßi ro n√¢ng cao v√† an to√†n giao d·ªãch
import { getCurrentPrice } from "./okx.js";
import { detectCrashRisk, analyzeMarketSentiment } from "./advancedIndicators.js";

/* ============== QU·∫¢N L√ù R·ª¶I RO N√ÇNG CAO ============== */

/**
 * Position Sizing Calculator - T√≠nh to√°n k√≠ch th∆∞·ªõc l·ªánh an to√†n
 */
export function calculatePositionSize(accountBalance, riskPercent, entryPrice, stopLoss) {
    const riskAmount = accountBalance * (riskPercent / 100);
    const riskPerUnit = Math.abs(entryPrice - stopLoss);
    const positionSize = riskAmount / riskPerUnit;
    
    return {
        positionSize,
        riskAmount,
        riskPerUnit,
        maxLoss: riskAmount,
        riskPercent
    };
}

/**
 * Risk Assessment - ƒê√°nh gi√° r·ªßi ro t·ªïng th·ªÉ
 */
export async function assessRisk(symbol, direction, entryPrice, stopLoss) {
    try {
        const currentPrice = await getCurrentPrice(symbol);
        if (!currentPrice) return null;
        
        // L·∫•y d·ªØ li·ªáu ph√¢n t√≠ch
        const [crashRisk, sentiment] = await Promise.all([
            detectCrashRisk(await getCandles(symbol, "1H", 50)),
            analyzeMarketSentiment(symbol)
        ]);
        
        let riskScore = 0;
        let warnings = [];
        
        // R·ªßi ro t·ª´ crash detection
        if (crashRisk?.riskLevel === "HIGH") {
            riskScore += 40;
            warnings.push("‚ö†Ô∏è R·ªßi ro s·∫≠p cao - Th·ªã tr∆∞·ªùng c√≥ th·ªÉ gi·∫£m m·∫°nh");
        } else if (crashRisk?.riskLevel === "MEDIUM") {
            riskScore += 20;
            warnings.push("‚ö†Ô∏è R·ªßi ro s·∫≠p trung b√¨nh");
        }
        
        // R·ªßi ro t·ª´ sentiment
        if (sentiment?.sentiment === "EXTREME_BEARISH" && direction === "LONG") {
            riskScore += 30;
            warnings.push("‚ö†Ô∏è T√¢m l√Ω th·ªã tr∆∞·ªùng c·ª±c k·ª≥ bi quan - Kh√¥ng n√™n LONG");
        } else if (sentiment?.sentiment === "EXTREME_BULLISH" && direction === "SHORT") {
            riskScore += 30;
            warnings.push("‚ö†Ô∏è T√¢m l√Ω th·ªã tr∆∞·ªùng c·ª±c k·ª≥ l·∫°c quan - Kh√¥ng n√™n SHORT");
        }
        
        // R·ªßi ro t·ª´ kho·∫£ng c√°ch SL
        const slDistance = Math.abs(entryPrice - stopLoss) / entryPrice * 100;
        if (slDistance > 5) {
            riskScore += 25;
            warnings.push("‚ö†Ô∏è Stop Loss qu√° xa - R·ªßi ro cao");
        } else if (slDistance < 1) {
            riskScore += 15;
            warnings.push("‚ö†Ô∏è Stop Loss qu√° g·∫ßn - C√≥ th·ªÉ b·ªã qu√©t");
        }
        
        // R·ªßi ro t·ª´ volatility
        if (crashRisk?.volatility > 0.05) {
            riskScore += 20;
            warnings.push("‚ö†Ô∏è Bi·∫øn ƒë·ªông cao - Th·ªã tr∆∞·ªùng kh√¥ng ·ªïn ƒë·ªãnh");
        }
        
        // X√°c ƒë·ªãnh m·ª©c r·ªßi ro
        let riskLevel = "LOW";
        if (riskScore > 70) riskLevel = "CRITICAL";
        else if (riskScore > 50) riskLevel = "HIGH";
        else if (riskScore > 30) riskLevel = "MEDIUM";
        
        return {
            riskScore,
            riskLevel,
            warnings,
            recommendations: generateRiskRecommendations(riskLevel, warnings),
            shouldTrade: riskScore < 50
        };
    } catch (error) {
        console.error(`L·ªói ƒë√°nh gi√° r·ªßi ro cho ${symbol}:`, error);
        return null;
    }
}

/**
 * Smart Trailing Stop Loss - Trailing stop th√¥ng minh
 */
export class SmartTrailingStop {
    constructor(symbol, direction, initialSL, entryPrice, atr) {
        this.symbol = symbol;
        this.direction = direction;
        this.initialSL = initialSL;
        this.entryPrice = entryPrice;
        this.currentSL = initialSL;
        this.atr = atr;
        this.breakevenTriggered = false;
        this.trailingDistance = atr * 1.5; // Kho·∫£ng c√°ch trailing
    }
    
    update(currentPrice) {
        if (this.direction === "LONG") {
            // Ki·ªÉm tra breakeven
            if (!this.breakevenTriggered && currentPrice >= this.entryPrice + this.atr) {
                this.currentSL = this.entryPrice;
                this.breakevenTriggered = true;
                return { action: "BREAKEVEN", newSL: this.currentSL };
            }
            
            // Trailing stop
            if (this.breakevenTriggered && currentPrice - this.trailingDistance > this.currentSL) {
                this.currentSL = currentPrice - this.trailingDistance;
                return { action: "TRAILING", newSL: this.currentSL };
            }
        } else {
            // Ki·ªÉm tra breakeven
            if (!this.breakevenTriggered && currentPrice <= this.entryPrice - this.atr) {
                this.currentSL = this.entryPrice;
                this.breakevenTriggered = true;
                return { action: "BREAKEVEN", newSL: this.currentSL };
            }
            
            // Trailing stop
            if (this.breakevenTriggered && currentPrice + this.trailingDistance < this.currentSL) {
                this.currentSL = currentPrice + this.trailingDistance;
                return { action: "TRAILING", newSL: this.currentSL };
            }
        }
        
        return { action: "NONE", newSL: this.currentSL };
    }
}

/**
 * Portfolio Risk Manager - Qu·∫£n l√Ω r·ªßi ro danh m·ª•c
 */
export class PortfolioRiskManager {
    constructor(maxRiskPerTrade = 2, maxTotalRisk = 10, maxConsecutiveLosses = 3) {
        this.maxRiskPerTrade = maxRiskPerTrade; // % r·ªßi ro t·ªëi ƒëa m·ªói l·ªánh
        this.maxTotalRisk = maxTotalRisk; // % r·ªßi ro t·ªëi ƒëa t·ªïng c·ªông
        this.maxConsecutiveLosses = maxConsecutiveLosses; // S·ªë l·ªánh thua li√™n ti·∫øp t·ªëi ƒëa
        this.consecutiveLosses = 0;
        this.totalRisk = 0;
        this.trades = [];
    }
    
    canOpenNewTrade(riskAmount, accountBalance) {
        const riskPercent = (riskAmount / accountBalance) * 100;
        
        // Ki·ªÉm tra r·ªßi ro m·ªói l·ªánh
        if (riskPercent > this.maxRiskPerTrade) {
            return {
                allowed: false,
                reason: `R·ªßi ro m·ªói l·ªánh (${riskPercent.toFixed(2)}%) v∆∞·ª£t qu√° gi·ªõi h·∫°n (${this.maxRiskPerTrade}%)`
            };
        }
        
        // Ki·ªÉm tra r·ªßi ro t·ªïng c·ªông
        if (this.totalRisk + riskPercent > this.maxTotalRisk) {
            return {
                allowed: false,
                reason: `R·ªßi ro t·ªïng c·ªông s·∫Ω v∆∞·ª£t qu√° gi·ªõi h·∫°n (${this.maxTotalRisk}%)`
            };
        }
        
        // Ki·ªÉm tra chu·ªói thua
        if (this.consecutiveLosses >= this.maxConsecutiveLosses) {
            return {
                allowed: false,
                reason: `ƒê√£ thua ${this.consecutiveLosses} l·ªánh li√™n ti·∫øp. T·∫°m d·ª´ng giao d·ªãch.`
            };
        }
        
        return { allowed: true };
    }
    
    addTrade(trade) {
        this.trades.push(trade);
        this.totalRisk += trade.riskPercent;
    }
    
    closeTrade(tradeId, result) {
        const trade = this.trades.find(t => t.id === tradeId);
        if (trade) {
            this.totalRisk -= trade.riskPercent;
            this.trades = this.trades.filter(t => t.id !== tradeId);
            
            if (result === "LOSS") {
                this.consecutiveLosses++;
            } else {
                this.consecutiveLosses = 0;
            }
        }
    }
    
    getRiskStatus() {
        return {
            totalRisk: this.totalRisk,
            maxTotalRisk: this.maxTotalRisk,
            consecutiveLosses: this.consecutiveLosses,
            maxConsecutiveLosses: this.maxConsecutiveLosses,
            activeTrades: this.trades.length,
            riskUtilization: (this.totalRisk / this.maxTotalRisk) * 100
        };
    }
}

/**
 * Market Condition Filter - B·ªô l·ªçc ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng
 */
export async function filterMarketConditions(symbol) {
    try {
        const [sentiment, crashRisk] = await Promise.all([
            analyzeMarketSentiment(symbol),
            detectCrashRisk(await getCandles(symbol, "1H", 50))
        ]);
        
        const conditions = {
            isTradeable: true,
            warnings: [],
            recommendations: []
        };
        
        // Ki·ªÉm tra sentiment c·ª±c ƒëoan
        if (sentiment?.sentiment === "EXTREME_BULLISH" || sentiment?.sentiment === "EXTREME_BEARISH") {
            conditions.warnings.push("‚ö†Ô∏è T√¢m l√Ω th·ªã tr∆∞·ªùng c·ª±c ƒëoan - C·∫©n th·∫≠n");
            conditions.recommendations.push("Gi·∫£m k√≠ch th∆∞·ªõc l·ªánh");
        }
        
        // Ki·ªÉm tra r·ªßi ro s·∫≠p
        if (crashRisk?.riskLevel === "HIGH") {
            conditions.isTradeable = false;
            conditions.warnings.push("üö® R·ªßi ro s·∫≠p cao - Kh√¥ng n√™n giao d·ªãch");
            conditions.recommendations.push("Ch·ªù th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh");
        } else if (crashRisk?.riskLevel === "MEDIUM") {
            conditions.warnings.push("‚ö†Ô∏è R·ªßi ro s·∫≠p trung b√¨nh");
            conditions.recommendations.push("Gi·∫£m k√≠ch th∆∞·ªõc l·ªánh");
        }
        
        // Ki·ªÉm tra volatility
        if (crashRisk?.volatility > 0.08) {
            conditions.warnings.push("‚ö†Ô∏è Bi·∫øn ƒë·ªông r·∫•t cao");
            conditions.recommendations.push("S·ª≠ d·ª•ng stop loss r·ªông h∆°n");
        }
        
        return conditions;
    } catch (error) {
        console.error(`L·ªói l·ªçc ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng cho ${symbol}:`, error);
        return { isTradeable: true, warnings: [], recommendations: [] };
    }
}

/**
 * Generate Risk Recommendations - T·∫°o khuy·∫øn ngh·ªã r·ªßi ro
 */
function generateRiskRecommendations(riskLevel, warnings) {
    const recommendations = [];
    
    switch (riskLevel) {
        case "CRITICAL":
            recommendations.push("üö® KH√îNG N√äN GIAO D·ªäCH");
            recommendations.push("Ch·ªù th·ªã tr∆∞·ªùng ·ªïn ƒë·ªãnh");
            break;
        case "HIGH":
            recommendations.push("‚ö†Ô∏è Gi·∫£m k√≠ch th∆∞·ªõc l·ªánh xu·ªëng 50%");
            recommendations.push("S·ª≠ d·ª•ng stop loss ch·∫∑t ch·∫Ω");
            recommendations.push("Theo d√µi s√°t sao");
            break;
        case "MEDIUM":
            recommendations.push("‚ö†Ô∏è C·∫©n th·∫≠n v·ªõi k√≠ch th∆∞·ªõc l·ªánh");
            recommendations.push("ƒê·∫∑t stop loss h·ª£p l√Ω");
            break;
        case "LOW":
            recommendations.push("‚úÖ ƒêi·ªÅu ki·ªán giao d·ªãch t·ªët");
            recommendations.push("C√≥ th·ªÉ giao d·ªãch b√¨nh th∆∞·ªùng");
            break;
    }
    
    return recommendations;
}

/**
 * Correlation Risk Check - Ki·ªÉm tra r·ªßi ro t∆∞∆°ng quan
 */
export function checkCorrelationRisk(symbol, existingTrades) {
    // Danh s√°ch c√°c c·∫∑p coin c√≥ t∆∞∆°ng quan cao
    const correlatedPairs = {
        'BTC-USDT-SWAP': ['ETH-USDT-SWAP', 'BNB-USDT-SWAP'],
        'ETH-USDT-SWAP': ['BTC-USDT-SWAP', 'BNB-USDT-SWAP'],
        'BNB-USDT-SWAP': ['BTC-USDT-SWAP', 'ETH-USDT-SWAP']
    };
    
    const correlatedSymbols = correlatedPairs[symbol] || [];
    const correlatedTrades = existingTrades.filter(trade => 
        correlatedSymbols.includes(trade.symbol)
    );
    
    if (correlatedTrades.length > 0) {
        return {
            hasCorrelationRisk: true,
            correlatedTrades,
            warning: `‚ö†Ô∏è ${symbol} c√≥ t∆∞∆°ng quan cao v·ªõi ${correlatedTrades.length} l·ªánh kh√°c`
        };
    }
    
    return { hasCorrelationRisk: false };
}

// Helper function
async function getCandles(symbol, timeframe, limit) {
    const { getCandles } = await import("./okx.js");
    return getCandles(symbol, timeframe, limit);
}
